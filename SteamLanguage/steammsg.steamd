#import "header.steamd"

class MsgChannelEncryptRequest<EMsg::ChannelEncryptRequest>
{
	const uint PROTOCOL_VERSION = 1;
	
	uint protocolVersion = MsgChannelEncryptRequest::PROTOCOL_VERSION;
	EUniverse universe = EUniverse::Invalid;
}

class MsgChannelEncryptResponse<EMsg::ChannelEncryptResponse>
{
	uint protocolVersion = MsgChannelEncryptRequest::PROTOCOL_VERSION;
	uint keySize = 128;
}

class MsgChannelEncryptResult<EMsg::ChannelEncryptResult>
{
	EResult result = EResult::Invalid;
}

class MsgMulti<EMsg::Multi>
{
	proto CMsgMulti proto;
}

class MsgClientNewLoginKey<EMsg::ClientNewLoginKey>
{
	uint uniqueID;
	byte<20> loginKey;
}

class MsgClientNewLoginKeyAccepted<EMsg::ClientNewLoginKeyAccepted>
{
	uint uniqueID;
}
 
class MsgClientHeartBeat<EMsg::ClientHeartBeat>
{
	proto CMsgClientHeartBeat proto;
}

class MsgClientLogon<EMsg::ClientLogon>
{
	const uint ObfuscationMask = 0xBAADF00D;
	const uint CurrentProtocol = 65569;

	proto CMsgClientLogon proto;
}

class MsgClientLogOff<EMsg::ClientLogOff>
{
	proto CMsgClientLogOff proto;
}

class MsgClientLogOnResponse<EMsg::ClientLogOnResponse>
{
	proto CMsgClientLogonResponse proto;
}

class MsgGSServerType<EMsg::GSServerType>
{
	proto CMsgGSServerType proto;
}

class MsgGSStatusReply<EMsg::GSStatusReply>
{
	proto CMsgGSStatusReply proto;
}

class MsgClientRegisterAuthTicketWithCM<EMsg::ClientRegisterAuthTicketWithCM>
{
	proto CMsgClientRegisterAuthTicketWithCM proto;
}

class MsgClientGetAppOwnershipTicket<EMsg::ClientGetAppOwnershipTicket>
{
	proto CMsgClientGetAppOwnershipTicket proto;
}

class MsgClientGetAppOwnershipTicketResponse<EMsg::ClientGetAppOwnershipTicketResponse>
{
	proto CMsgClientGetAppOwnershipTicketResponse proto;
}

class MsgClientAuthList<EMsg::ClientAuthList>
{
	proto CMsgClientAuthList proto;
}

class MsgClientRequestFriendData<EMsg::ClientRequestFriendData>
{
	proto CMsgClientRequestFriendData proto;
}

class MsgClientChangeStatus<EMsg::ClientChangeStatus>
{
	byte personaState;
}

class MsgClientPersonaState<EMsg::ClientPersonaState>
{
	proto CMsgClientPersonaState proto;
}

class MsgClientSessionToken<EMsg::ClientSessionToken>
{
	proto CMsgClientSessionToken proto;
}

class MsgClientGameConnectTokens<EMsg::ClientGameConnectTokens>
{
	proto CMsgClientGameConnectTokens proto;
}

class MsgClientGamesPlayedWithDataBlob<EMsg::ClientGamesPlayedWithDataBlob>
{
	proto CMsgClientGamesPlayed proto;
}

class MsgClientFriendsList<EMsg::ClientFriendsList>
{
	proto CMsgClientFriendsList proto;
}

class MsgClientFriendMsg<EMsg::ClientFriendMsg>
{
	proto CMsgClientFriendMsg proto;
}

class MsgClientFriendMsgIncoming<EMsg::ClientFriendMsgIncoming>
{
	proto CMsgClientFriendMsgIncoming proto;
}

class MsgClientVACBanStatus<EMsg::ClientVACBanStatus>
{
	uint numBans;
};

class MsgClientAppUsageEvent<EMsg::ClientAppUsageEvent>
{
	EAppUsageEvent AppUsageEvent;
	ulong GameID;
	ushort Offline;
};

class MsgClientAccountInfo<EMsg::ClientAccountInfo>
{
	proto CMsgClientAccountInfo proto;
};

class MsgClientLicenseList<EMsg::ClientLicenseList>
{
	proto CMsgClientLicenseList proto;
};

class MsgClientAppMinutesPlayedData<EMsg::ClientAppMinutesPlayedData>
{
	proto CMsgClientAppMinutesPlayedData proto;
};

class MsgClientWalletInfoUpdate<EMsg::ClientWalletInfoUpdate>
{
	proto CMsgClientWalletInfoUpdate proto;
};

class MsgClientCMList<EMsg::ClientCMList>
{
	proto CMsgClientCMList proto;
};

class MsgClientEmailAddrInfo<EMsg::ClientEmailAddrInfo>
{
	uint passwordStrength;
	uint flagsAccountSecurityPolicy;
	byte validated;
}; 

class MsgClientUpdateGuestPassesList<EMsg::ClientUpdateGuestPassesList>
{
	EResult result;
	int countGuestPassesToGive;
	int countGuestPassesToRedeem;
};

class MsgClientServerList<EMsg::ClientServerList>
{
	int countServers;
};

class MsgClientRequestedClientStats<EMsg::ClientRequestedClientStats>
{	
	int countStats;
};

class MsgClientAddFriend<EMsg::ClientAddFriend>
{
	proto CMsgClientAddFriend proto;
};


class MsgClientAddFriendResponse<EMsg::ClientAddFriendResponse>
{
	proto CMsgClientAddFriendResponse proto;
};

class MsgClientRemoveFriend<EMsg::ClientRemoveFriend>
{
	proto CMsgClientRemoveFriend proto;
};


class MsgClientP2PIntroducerMessage<EMsg::ClientP2PIntroducerMessage>
{
	steamidmarshal ulong steamID;
	EIntroducerRouting routingType;
	byte<1450> data;
	uint dataLen;
};

class MsgClientFromGC<EMsg::ClientFromGC>
{
	uint appId;
	uint GCEMsg;
};

class MsgClientToGC<EMsg::ClientToGC>
{
	uint appId;
	uint GCEMsg;
};