#import "header.steamd"

#import "gamecoordinator.steamd"

class MsgChannelEncryptRequest<EMsg::ChannelEncryptRequest>
{
	const uint PROTOCOL_VERSION = 1;
	
	uint protocolVersion = MsgChannelEncryptRequest::PROTOCOL_VERSION;
	EUniverse universe = EUniverse::Invalid;
};

class MsgChannelEncryptResponse<EMsg::ChannelEncryptResponse>
{
	uint protocolVersion = MsgChannelEncryptRequest::PROTOCOL_VERSION;
	uint keySize = 128;
};

class MsgChannelEncryptResult<EMsg::ChannelEncryptResult>
{
	EResult result = EResult::Invalid;
};

class MsgMulti<EMsg::Multi>
{
	proto CMsgMulti proto;
};

class MsgClientNewLoginKey<EMsg::ClientNewLoginKey>
{
	uint uniqueID;
	byte<20> loginKey;
};

class MsgClientNewLoginKeyAccepted<EMsg::ClientNewLoginKeyAccepted>
{
	uint uniqueID;
};
 
class MsgClientHeartBeat<EMsg::ClientHeartBeat>
{
	proto CMsgClientHeartBeat proto;
};

class MsgClientLogon<EMsg::ClientLogon>
{
	const uint ObfuscationMask = 0xBAADF00D;
	const uint CurrentProtocol = 65573;

	proto CMsgClientLogon proto;
};

class MsgClientLogOff<EMsg::ClientLogOff>
{
	proto CMsgClientLogOff proto;
};

class MsgClientLogOnResponse<EMsg::ClientLogOnResponse>
{
	proto CMsgClientLogonResponse proto;
};

class MsgGSServerType<EMsg::GSServerType>
{
	proto CMsgGSServerType proto;
};

class MsgGSStatusReply<EMsg::GSStatusReply>
{
	proto CMsgGSStatusReply proto;
};

class MsgClientRegisterAuthTicketWithCM<EMsg::ClientRegisterAuthTicketWithCM>
{
	proto CMsgClientRegisterAuthTicketWithCM proto;
};

class MsgClientGetAppOwnershipTicket<EMsg::ClientGetAppOwnershipTicket>
{
	proto CMsgClientGetAppOwnershipTicket proto;
};

class MsgClientGetAppOwnershipTicketResponse<EMsg::ClientGetAppOwnershipTicketResponse>
{
	proto CMsgClientGetAppOwnershipTicketResponse proto;
};

class MsgClientAuthList<EMsg::ClientAuthList>
{
	proto CMsgClientAuthList proto;
};

class MsgClientRequestFriendData<EMsg::ClientRequestFriendData>
{
	proto CMsgClientRequestFriendData proto;
};

class MsgClientChangeStatus<EMsg::ClientChangeStatus>
{
	proto CMsgClientChangeStatus proto;
};

class MsgClientPersonaState<EMsg::ClientPersonaState>
{
	proto CMsgClientPersonaState proto;
};

class MsgClientSessionToken<EMsg::ClientSessionToken>
{
	proto CMsgClientSessionToken proto;
};

class MsgClientGameConnectTokens<EMsg::ClientGameConnectTokens>
{
	proto CMsgClientGameConnectTokens proto;
};

class MsgClientGamesPlayedWithDataBlob<EMsg::ClientGamesPlayedWithDataBlob>
{
	proto CMsgClientGamesPlayed proto;
};

class MsgClientFriendsList<EMsg::ClientFriendsList>
{
	proto CMsgClientFriendsList proto;
};

class MsgClientFriendMsg<EMsg::ClientFriendMsg>
{
	proto CMsgClientFriendMsg proto;
};

class MsgClientFriendMsgIncoming<EMsg::ClientFriendMsgIncoming>
{
	proto CMsgClientFriendMsgIncoming proto;
};

class MsgClientVACBanStatus<EMsg::ClientVACBanStatus>
{
	uint numBans;
};

class MsgClientAppUsageEvent<EMsg::ClientAppUsageEvent>
{
	EAppUsageEvent appUsageEvent;
	gameidmarshal ulong gameID;
	ushort offline;
};

class MsgClientAccountInfo<EMsg::ClientAccountInfo>
{
	proto CMsgClientAccountInfo proto;
};

class MsgClientLicenseList<EMsg::ClientLicenseList>
{
	proto CMsgClientLicenseList proto;
};

class MsgClientAppInfoUpdate<EMsg::ClientAppInfoUpdate>
{
	proto CMsgClientAppInfoUpdate proto;
};

class MsgClientAppInfoChanges<EMsg::ClientAppInfoChanges>
{
	proto CMsgClientAppInfoChanges proto;
};

class MsgClientAppInfoRequest<EMsg::ClientAppInfoRequest>
{
	proto CMsgClientAppInfoRequest proto;
};

class MsgClientAppInfoResponse<EMsg::ClientAppInfoResponse>
{
	proto CMsgClientAppInfoResponse proto;
};

class MsgClientAppMinutesPlayedData<EMsg::ClientAppMinutesPlayedData>
{
	proto CMsgClientAppMinutesPlayedData proto;
};

class MsgClientWalletInfoUpdate<EMsg::ClientWalletInfoUpdate>
{
	proto CMsgClientWalletInfoUpdate proto;
};

class MsgClientCMList<EMsg::ClientCMList>
{
	proto CMsgClientCMList proto;
};

class MsgClientEmailAddrInfo<EMsg::ClientEmailAddrInfo>
{
	uint passwordStrength;
	uint flagsAccountSecurityPolicy;
	boolmarshal byte validated;
}; 

class MsgClientUpdateGuestPassesList<EMsg::ClientUpdateGuestPassesList>
{
	EResult result;
	int countGuestPassesToGive;
	int countGuestPassesToRedeem;
};

class MsgClientServerList<EMsg::ClientServerList>
{
	proto CMsgClientServerList proto;
};

class MsgClientRequestedClientStats<EMsg::ClientRequestedClientStats>
{	
	int countStats;
};

class MsgClientAddFriend<EMsg::ClientAddFriend>
{
	proto CMsgClientAddFriend proto;
};


class MsgClientAddFriendResponse<EMsg::ClientAddFriendResponse>
{
	proto CMsgClientAddFriendResponse proto;
};

class MsgClientRemoveFriend<EMsg::ClientRemoveFriend>
{
	proto CMsgClientRemoveFriend proto;
};


class MsgClientP2PIntroducerMessage<EMsg::ClientP2PIntroducerMessage>
{
	steamidmarshal ulong steamID;
	EIntroducerRouting routingType;
	byte<1450> data;
	uint dataLen;
};

class MsgClientFromGC<EMsg::ClientFromGC>
{
	proto CMsgAMGCClientRelay proto;
};

class MsgClientToGC<EMsg::ClientToGC>
{
	proto CMsgAMGCClientRelay proto;
};

class MsgClientUpdateMachineAuth<EMsg::ClientUpdateMachineAuth>
{
	proto CMsgClientUpdateMachineAuth proto;
};

class MsgClientUpdateMachineAuthResponse<EMsg::ClientUpdateMachineAuthResponse>
{
	proto CMsgClientUpdateMachineAuthResponse proto;
};

class MsgClientLoggedOff<EMsg::ClientLoggedOff>
{
	proto CMsgClientLoggedOff proto;
};

class MsgClientGetUserStats<EMsg::ClientGetUserStats>
{
	proto CMsgClientGetUserStats proto;
};

class MsgClientGetUserStatsResponse<EMsg::ClientGetUserStatsResponse>
{
	proto CMsgClientGetUserStatsResponse proto;
};

class MsgClientStoreUserStats2<EMsg::ClientStoreUserStats2>
{
	proto CMsgClientStoreUserStats2 proto;
};

class MsgClientStoreUserStatsResponse<EMsg::ClientStoreUserStatsResponse>
{
	proto CMsgClientStoreUserStatsResponse proto;
};

class MsgClientCreateAccountResponse<EMsg::ClientCreateAccountResponse>
{
	EResult result;
};

class MsgClientCreateAccount3<EMsg::ClientCreateAccount3>
{
};

class MsgClientOGSBeginSession<EMsg::ClientOGSBeginSession>
{
	byte accountType;
	steamidmarshal ulong accountId;
	uint appId;
	uint timeStarted;
};

class MsgClientOGSBeginSessionResponse<EMsg::ClientOGSBeginSessionResponse>
{
	EResult result;
	boolmarshal byte collectingAny;
	boolmarshal byte collectingDetails;
	ulong sessionId;
};

class MsgClientOGSEndSession<EMsg::ClientOGSEndSession>
{
	ulong sessionId;
	uint timeEnded;
	int reasonCode;
	int countAttributes;
};

class MsgClientOGSEndSessionResponse<EMsg::ClientOGSEndSessionResponse>
{
	EResult result;
};


class MsgClientOGSWriteRow<EMsg::ClientOGSWriteRow>
{
	ulong sessionId;
	int countAttributes;
};

class MsgClientGetFriendsWhoPlayGame<EMsg::ClientGetFriendsWhoPlayGame>
{
	gameidmarshal ulong gameId;
};

class MsgClientGetFriendsWhoPlayGameResponse<EMsg::ClientGetFriendsWhoPlayGameResponse>
{
	EResult result;
	gameidmarshal ulong gameId;
	uint countFriends;
};

class MsgGSPerformHardwareSurvey<EMsg::GSPerformHardwareSurvey>
{
	uint flags;
};

class MsgClientTicketAuthComplete<EMsg::ClientTicketAuthComplete>
{
	proto CMsgClientTicketAuthComplete proto;
};

class MsgGSGetPlayStatsResponse<EMsg::GSGetPlayStatsResponse>
{
	EResult result;
	int rank;
	uint lifetimeConnects;
	uint lifetimeMinutesPlayed;
};

class MsgGSGetReputationResponse<EMsg::GSGetReputationResponse>
{
	EResult result;
	uint reputationScore;
	boolmarshal byte banned;
	uint bannedIp;
	ushort bannedPort;
	ulong bannedGameId;
	uint timeBanExpires;
};

class MsgGSDeny<EMsg::GSDeny>
{
	steamidmarshal ulong steamId;
	EDenyReason denyReason;
};

class MsgGSApprove<EMsg::GSApprove>
{
	steamidmarshal ulong steamId;
};

class MsgGSKick<EMsg::GSKick>
{
	steamidmarshal ulong steamId;
	EDenyReason denyReason;
	int waitTilMapChange;
};

class MsgGSGetUserGroupStatus<EMsg::GSGetUserGroupStatus>
{
	steamidmarshal ulong steamIdUser;
	steamidmarshal ulong steamIdGroup;
};

class MsgGSGetUserGroupStatusResponse<EMsg::GSGetUserGroupStatusResponse>
{
	steamidmarshal ulong steamIdUser;
	steamidmarshal ulong steamIdGroup;
	EClanRelationship clanRelationship;
	EClanRank clanRank;
};

class MsgClientJoinChat<EMsg::ClientJoinChat>
{
	steamidmarshal ulong steamIdChat;
	boolmarshal byte isVoiceSpeaker;
};

class MsgClientChatEnter<EMsg::ClientChatEnter>
{
	steamidmarshal ulong steamIdChat;
	steamidmarshal ulong steamIdFriend;

	EChatRoomType chatRoomType;

	steamidmarshal ulong steamIdOwner;
	steamidmarshal ulong steamIdClan;

	byte chatFlags;

	EChatRoomEnterResponse enterResponse;
};

class MsgClientChatMsg<EMsg::ClientChatMsg>
{
	steamidmarshal ulong steamIdChatter;
	steamidmarshal ulong steamIdChatRoom;
	EChatEntryType chatMsgType;
};

class MsgClientChatMemberInfo<EMsg::ClientChatMemberInfo>
{
	steamidmarshal ulong steamIdChat;
	EChatInfoType type;
};

class MsgClientChatActionResult<EMsg::ClientChatActionResult>
{
	steamidmarshal ulong steamIdChat;
	steamidmarshal ulong steamIdUserActedOn;
	EChatAction chatAction;
	EChatActionResult actionResult;
};

class MsgClientRequestMachineAuth<EMsg::ClientRequestMachineAuth>
{
	proto CMsgClientRequestMachineAuth proto;
};

class MsgClientRequestMachineAuthResponse<EMsg::ClientRequestMachineAuthResponse>
{
	proto CMsgClientRequestMachineAuthResponse proto;
};

class MsgClientGetDepotDecryptionKey<EMsg::ClientGetDepotDecryptionKey>
{
	uint depotID;
};

class MsgClientGetDepotDecryptionKeyResponse<EMsg::ClientGetDepotDecryptionKeyResponse>
{
	EResult result;
	uint depotID;
	byte<32> depotEncryptionKey;
};

class MsgClientGetNumberOfCurrentPlayers<EMsg::ClientGetNumberOfCurrentPlayers>
{
	gameidmarshal ulong gameID;
};

class MsgClientGetNumberOfCurrentPlayersResponse<EMsg::ClientGetNumberOfCurrentPlayersResponse>
{
	EResult result;
	uint numPlayers;
};