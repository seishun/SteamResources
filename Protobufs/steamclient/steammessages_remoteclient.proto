import "steammessages_base.proto";

enum ERemoteClientBroadcastMsg {
	k_ERemoteClientBroadcastMsgDiscovery = 0;
	k_ERemoteClientBroadcastMsgStatus = 1;
	k_ERemoteClientBroadcastMsgOffline = 2;
}

enum ERemoteClientService {
	k_ERemoteClientServiceNone = 0;
	k_ERemoteClientServiceRemoteControl = 1;
}

message CMsgRemoteClientBroadcastHeader {
	optional uint64 client_id = 1;
	optional .ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
}

message CMsgRemoteClientBroadcastStatus {
	optional int32 version = 1;
	optional int32 min_version = 2;
	optional uint32 connect_port = 3;
	optional string hostname = 4;
	repeated fixed64 users = 5;
	optional uint32 enabled_services = 6;
}

message CMsgRemoteClientBroadcastDiscovery {
	optional uint32 seq_num = 1;
}

message CMsgRemoteClientAppStatus {
	message AppStatus {
		optional uint32 app_id = 1;
		optional uint32 app_state = 2;
	}

	repeated .CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
}

message CMsgRemoteClientAuth {
	optional uint64 client_id = 1;
	optional .CMsgRemoteClientBroadcastStatus status = 2;
}

message CMsgRemoteClientAuthResponse {
	optional int32 eresult = 1 [default = 2];
}

message CMsgRemoteClientStartStream {
	optional uint32 app_id = 1;
	optional int32 environment = 2;
	optional bool has_gamepad = 3;
	optional int32 launch_option = 4 [default = -1];
}

message CMsgRemoteClientStartStreamResponse {
	optional int32 e_launch_result = 1 [default = 2];
	optional uint32 stream_port = 2;
	repeated int32 launch_options = 3;
}

message CMsgRemoteClientPing {
}

message CMsgRemoteClientPingResponse {
}

